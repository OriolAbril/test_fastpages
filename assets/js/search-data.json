{
  
    
        "post0": {
            "title": "ArviZ customization with rcParams",
            "content": "Comments are not enabled for the blog, to inquiry further about the contents of the post, ask on ArviZ Issues or PyMC Discourse . About . ArviZ not only builds on top of matplotlib&#39;s rcParams but also adds its own rcParams instance to handle specific settings. This post will only graze matplotlib&#39;s rcParams, which are already detailed in matplotlib&#39;s docs; it will dive into specific ArviZ rcParams. . Introduction . Paraphrasing the description on rcParams in the documentation of matplotlib: . ArviZ uses arvizrc configuration files to customize all kinds of properties, which we call rcParams. You can control the defaults of many properties in ArviZ:data loading mode (lazy or eager), automatically showing generated plots, the default information criteria and so on. There are several ways of modifying arviz.rcParams instance, each of them targeted to specific needs. . Customizing ArviZ . arvizrc file . To define default values on a per user or per project basis, arvizrc file should be used. When imported, ArviZ search for an arvizrc file in several locations sorted below by priority: . $PWD/arvizrc | $ARVIZ_DATA/arvizrc | On Linux, $XDG_CONFIG_HOME/arviz/arvizrc (if $XDG_CONFIG_HOME is defined) | or $HOME/.config/arviz/arvizrc (if $XDG_CONFIG_HOME is not defined) | . | On other platforms, $HOME/.arviz/arvizrc if $HOME is defined | . | . Once one of these files is found, ArviZ stops looking and loads its configuration. If none of them are present, the values hardcoded in ArviZ codebase are used. The file used to set the default values in ArviZ can be obtained with the following command: . import arviz as az print(az.rcparams.get_arviz_rcfile()) . /home/oriol/.config/arviz/arvizrc . ArviZ has loaded a file used to set defaults on a per user basis. Unless I use a different rc file in the current directory or modify rcParams as explained above, this configuration will be automatically used every time ArviZ is imported. This can be really useful to define the favourite backend or information criterion, written once in the rc file and ArviZ automatically uses the desired values. . Dynamic rc settings . To set default values on a per file or per project basis, rcParams can also be modified dynamically, either overwritting a specific key: . az.rcParams[&quot;data.load&quot;] = &quot;eager&quot; . Note that rcParams is the instance to be modified, exactly like in matplotlib. . Another option is to define a dictionary with several new defaults and update rcParams all at once. . rc = { &quot;data.load&quot;: &quot;lazy&quot;, &quot;plot.max_subplots&quot;: 30, &quot;stats.ic_scale&quot;: &quot;negative_log&quot;, &quot;plot.matplotlib.constrained_layout&quot;: False } az.rcParams.update(rc) . rc_context . Eventually, to temporarily use a different set of defaults, ArviZ also has a rc_context function. Its main difference and advantage is that it is a context manager, therefore, all code executed inside the context will use the defaults defined by rc_context but once we exit the context, everything goes back to normal. . #collapse-hide idata = az.load_arviz_data(&quot;centered_eight&quot;) print(az.summary(idata, var_names=&quot;theta&quot;, kind=&quot;stats&quot;)) with az.rc_context({&quot;data.index_origin&quot;: 1}): print(az.summary(idata, var_names=&quot;theta&quot;, kind=&quot;stats&quot;)) print(az.summary(idata, var_names=&quot;theta&quot;, kind=&quot;stats&quot;)) . . mean sd hpd_3% hpd_97% theta[0] 6.026 5.782 -3.707 17.337 theta[1] 4.724 4.736 -4.039 13.999 theta[2] 3.576 5.559 -6.779 13.838 theta[3] 4.478 4.939 -5.528 13.392 theta[4] 3.064 4.642 -5.972 11.547 theta[5] 3.821 4.979 -5.507 13.232 theta[6] 6.250 5.436 -3.412 16.920 theta[7] 4.544 5.521 -5.665 15.266 mean sd hpd_3% hpd_97% theta[1] 6.026 5.782 -3.707 17.337 theta[2] 4.724 4.736 -4.039 13.999 theta[3] 3.576 5.559 -6.779 13.838 theta[4] 4.478 4.939 -5.528 13.392 theta[5] 3.064 4.642 -5.972 11.547 theta[6] 3.821 4.979 -5.507 13.232 theta[7] 6.250 5.436 -3.412 16.920 theta[8] 4.544 5.521 -5.665 15.266 mean sd hpd_3% hpd_97% theta[0] 6.026 5.782 -3.707 17.337 theta[1] 4.724 4.736 -4.039 13.999 theta[2] 3.576 5.559 -6.779 13.838 theta[3] 4.478 4.939 -5.528 13.392 theta[4] 3.064 4.642 -5.972 11.547 theta[5] 3.821 4.979 -5.507 13.232 theta[6] 6.250 5.436 -3.412 16.920 theta[7] 4.544 5.521 -5.665 15.266 . ArviZ default settings . Here are the default ArviZ settings (also available in GitHub) . from arviz.rcparams import RcParams, defaultParams print(RcParams([(key, default) for key, (default, _) in defaultParams.items()])) . data.http_protocol : https data.index_origin : 0 data.load : lazy data.save_warmup : False plot.backend : matplotlib plot.bokeh.bounds_x_range: auto plot.bokeh.bounds_y_range: auto plot.bokeh.figure.dpi : 60 plot.bokeh.figure.height: 500 plot.bokeh.figure.width: 500 plot.bokeh.layout.order: default plot.bokeh.layout.sizing_mode: fixed plot.bokeh.layout.toolbar_location: above plot.bokeh.marker : Cross plot.bokeh.output_backend: webgl plot.bokeh.show : True plot.bokeh.tools : reset,pan,box_zoom,wheel_zoom,lasso_select,undo,save,hover plot.matplotlib.constrained_layout: True plot.matplotlib.show : False plot.max_subplots : 40 plot.point_estimate : mean stats.credible_interval: 0.94 stats.ic_scale : log stats.information_criterion: loo .",
            "url": "https://oriolabril.github.io/test_fastpages/arviz/customization/rcparams/2020/04/30/rcParams.html",
            "relUrl": "/arviz/customization/rcparams/2020/04/30/rcParams.html",
            "date": " • Apr 30, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "ArviZ customization: `plot_trace`",
            "content": "",
            "url": "https://oriolabril.github.io/test_fastpages/arviz/visualization/plotting/2020/04/30/plot-trace.html",
            "relUrl": "/arviz/visualization/plotting/2020/04/30/plot-trace.html",
            "date": " • Apr 30, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Introduction to ArviZ: InferenceData objects",
            "content": "About . This notebook is an introduction to InferenceData objects and their role in ArviZ. It aims to be as hands-on as possible, using examples to cover different use cases of the data in each group, examples on how to combine several InferenceData objects and so on. . The key idea behind InferenceData objects is to centralize and store all data relevant to a specific Bayesian inference run; from observed_data to predictions going through prior and sample_stats. The goal is therefore to both ease exploration and visualization of Bayesian inference results and to ease their sharing. Hence, ArviZ also provides several converter functions to transform results from common inference libraries such as PyMC3, PyStan or Pyro to InferenceData. In the future, we&#39;ll dedicate one post to each converter function, but before, we have to make sure the conversion process is worth it! .",
            "url": "https://oriolabril.github.io/test_fastpages/arviz/inferencedata/data/2020/04/30/InferenceData.html",
            "relUrl": "/arviz/inferencedata/data/2020/04/30/InferenceData.html",
            "date": " • Apr 30, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a renegade physicist/engineer who loves statistical data analysis. By day, I am currently a Research Assistant on Bayesian Model Selection with David Rossell at UPF, Barcelona. By night I am a core developer of ArviZ a Python package for exploratory analysis of Bayesian models. In addition to data analysis, I also love programming and teaching. I am also interested in open science and reproducible research. . In my spare time, I like to play board games and going to the beach to do water activities. I have been sailing and snorkeling regularly since I was little and more I recently added kayaking to the mix too! I generally spend the summer at the Costa Brava. Here I leave you a sneak peak of the views when nobody is around . . Projects . ArviZ | mombf | . Publications and presentations . PROBPROG 2020: Coming on autumn 2020 | M. Badenas-Agusti, M. N. Günther, T. Daylan, et al., 2020, HD 191939: Three Sub-Neptunes Transiting a Sun-like Star Only 54 pc Away | D. Foreman-Mackey, W. Farr, M. Sinha, A. Archibald, et al., 2019, emcee v3: A Python ensemble sampling toolkit for affine-invariant MCMC. | .",
          "url": "https://oriolabril.github.io/test_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://oriolabril.github.io/test_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

  
  

}